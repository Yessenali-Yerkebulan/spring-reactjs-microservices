---
version: '3.0'
services:
    postgres:
        container_name: demo-postgres
        image: postgres
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: root
            PGDATA: /data/postgres
        volumes:
            - postgres:/data/postgres
        ports:
            - "5432:5432"
        networks:
            - postgres
        restart: unless-stopped

    pgadmin:
        container_name: demo-pgadmin
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - postgres
        restart: unless-stopped

    keycloak-mysql:
        container_name: keycloak-mysql
        image: mysql:5.7
        volumes:
            - ./mysql_keycloak_data:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: keycloak
            MYSQL_USER: keycloak
            MYSQL_PASSWORD: password

    keycloak:
        container_name: keycloak
        image: quay.io/keycloak/keycloak:18.0.0
        command: [ "start-dev", "--import-realm" ]
        environment:
            DB_VENDOR: MYSQL
            DB_ADDR: mysql
            DB_DATABASE: keycloak
            DB_USER: keycloak
            DB_PASSWORD: password
            KEYCLOAK_ADMIN: admin
            KEYCLOAK_ADMIN_PASSWORD: admin
        ports:
            - "8080:8080"
        volumes:
            - ./realms/:/opt/keycloak/data/import/
        depends_on:
            - keycloak-mysql

    zookeeper:
        image: confluentinc/cp-zookeeper:7.0.1
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    broker:
        image: confluentinc/cp-kafka:7.0.1
        container_name: broker
        ports:
            - "9092:9092"
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    zipkin:
        image: openzipkin/zipkin
        container_name: zipkin
        ports:
            - "9411:9411"

    discovery-server:
        image: merikbest/spring-reactjs-microservices/discovery-server:latest
        container_name: discovery-server
        ports:
            - "8761:8761"
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        depends_on:
            - zipkin

    api-gateway:
        image: merikbest/spring-reactjs-microservices/api-gateway:latest
        container_name: api-gateway
        ports:
            - "8181:8080"
        expose:
            - "8181"
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
        depends_on:
            - discovery-server
            - keycloak
            - zipkin

    product-service:
        container_name: product-service
        image: merikbest/spring-reactjs-microservices/product-service:latest
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        depends_on:
            - discovery-server
            - api-gateway
            - postgres
            - zipkin

    order-service:
        container_name: order-service
        image: merikbest/spring-reactjs-microservices/order-service:latest
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
        depends_on:
            - discovery-server
            - api-gateway
            - postgres
            - broker
            - zipkin

    inventory-service:
        container_name: inventory-service
        image: merikbest/spring-reactjs-microservices/inventory-service:latest
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
        depends_on:
            - discovery-server
            - api-gateway
            - postgres

    notification-service:
        container_name: notification-service
        image: merikbest/spring-reactjs-microservices/notification-service:latest
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        depends_on:
            - discovery-server
            - api-gateway
            - broker
            - zipkin

networks:
    postgres:
        driver: bridge
    spring:
        driver: bridge
    monitoring:

volumes:
    postgres:
    pgadmin: